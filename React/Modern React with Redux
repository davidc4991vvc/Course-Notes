                              Notes from Udemy course by Stephen Grider
                              Modern React with Redux
                              
                    Section 1 - Intro to React
1 - Introduction and Github Links for Project Files
    The course starts off with an intro and links to prebuilt Github examples

2 - These are links to completed projects source code for comparison

3 - The instructor explains the rationale behind using boilerplate skeleton projects to facilitate learning
    React\Redux. Also explained is the structure of the boilerplate apps and the files and libraries that
    they use. ES6\2016 is used and it is also explained that at this stage not all browsers will support
    the use of this version of Javascript. The work around is to use tooling called transpiling using a set
    of tools called Babel & Webpack which will make a file compatable with browsers.
    
4 - This lecture is about how to setup the environment using the instructors premade git repository, upon
    cloning or copying the repository npm install will need to be run in order to install the dependencies
    that are needed.
    
5 - This video is about the project setup which is a video player built using React, there is a mockup used to
    explain how the video player will function, also there is no dummy data used instead the Youtube API is going
    to be used and the player itself is able to be deployed. The command npm start is used which will in turn create
    a local sever as well as running Webpack.
    
  * Running a cloud based IDE like cloud9 will have different methods of running webpack server, you may also
    need to install dependencies using the -g for global and --save flags to ensure that you do not have to keep
    changing into directories. On cloud9 the following command works
    webpack-dev-server --port $PORT --host $IP  --content-base build/
    
6 - A taste of JSX
    To run an NPM Server - Use the npm start command
  * On Cloud9 this will not work as it will give an Application Not Running message so you will need to run 
    webpack-dev-server --port $PORT --host $IP  --content-base build
    The first change to a file to illustrate what is happening is to app.js in the components folder and the 
    React Simple Server text is replaced by Hello There, by going to the running server page and refreshing
    you will see that the messages have changed.
    The src folder is deleted to avoid having pre-existing boilerplate code, this means that you can start totally
    from scratch, the first step is to make an src folder and within it an index.js file
    React code is normally written in components or views, these terms are used to mean the same thing. Components
    are snippets of code that produce html.
    ES6 Syntax is used eg const, it is similar to declaring a variable but it does not change hence the const keyword
    rather than var.
    JSX allows for what looks like HTML to be written in Javascript eg <div> </div>  is used inside of a function.

7 - More JSX
    JSX cannot be interpreted by the browser, that is done by tools like Babel.
    JSX is not compulsory to write but is recommended.
    JSX improves legibility of component code.

8 - ES6 Import Statements
    Instructor makes the point of ensuring that student understands how to interpret error messages.
    Import statements are used to make code modules available in files e.g import React from 'react'
    will allow the react library to be used in a file.

9 - ReactDOM vs React
    React is diverging into 2 libraries, the main react library works with components, ReactDom is now the library
    which handles rendering to the DOM. This means that you will also need to import ReactDOM to be able to render
    to the DOM in a file.
    The command also changes from React.render to ReactDOM.render

10 - Differences Between Component Instances and Component Classes
    There is a quick explanation of the difference between a class and an instance of that class. Also explained is
    the error from the sample code which is cause by using a class and not an instance. The solution is to instaniate
    the object.
    Whenever there is a JSX tag with nothing inside it can be made self closing.
    Replacing ReactDOM.render(App) with ReactDOM.render(<App />) will change from a class to an instance as using
    the tage will automatically be interpolated as createElement.

11 - Render Targets
    ReactDOM.render(<App />) causes and error due the target not being a DOM container. This is rectified by adding a 
    second argument to the rnder function which renders an existing DOM node, effectively it tells React where to put
    the component on the page. One example is where a html page has a div whose id is "container" by adding this 
    container to the render function enables React to render the component to the approriate section. In this case the
    .render function becomes ReactDOM.render(<App />, document.querySelector('.container')) and the error is resolved.
    ES6 syntax using fat arrow is introduced.

12 - Component Structure
    A component is a function or object that returns some Html.
    Nesting components inside one another is fine and quite common especially when rendering a list of components.
    There is a rule of one component per file no matter how small a component may be.
    Usually a folder called components holds the application components.

13 - Youtube Search API Signup
    The course uses the Youtube API to fetch and find videos and that must be signed up for by a developer.
    The API is free but will require an API key, this like others can be signed up for at developers.google dashboard.
    The video shows the process of signing up for an API key.
    As it is using ES6 the API key is declared using const as var is not used in ES6
    There is an NPM package Youtube-api-search that enables searching in an application

14 - Export Statements
    The first component in the app to be addressed is the search bar.
    Returning an <input /> will like discussed above generate an input box and again it does not need to be closed.
    export default "component" will make just the component code available to be imported by other files.
    For all self written files full and correct file references must be provided eg "./components/search_bar"
    File extensions need not be included in all cases.
    To render a component inside another is easy in the example is is the following
    	const App = () => { return (<div> <SearchBar /> </div>)} 
    Parentheses are used in multi line returns, if using single line ensure code is on the same line as return to avoid
    errors.

15 - Class-Based Components

16 - Handling User Events

17 - Introduction to State

18 - More on State

19 - Controlled Components

20 - Breather and Review



                      Section 2 - Ajax Requests with React
1 - Youtube Search Response

2 - Refactoring Functional Components to Class Components

3 - Props

4 - Building Lists with Map

5 - List Item Keys

6 - Video List Items

7 - Detail Component and Template Strings

8 - Handling Null Props

9 - Video Selection

10 - Styling with CSS

11 - Searching for Videos

12 - Throttling Search Term Input

13 - React Wrapup


                    Section 3 - Modelling Application State
1 - Foreword on Redux

2 - What is Redux?

3 - More on Redux

4 - Even More on Redux


                    Section 4 - Managing App State with Redux
1 - Reducers

2 - Containers - Connecting Redux to React

3 - Containers Continued

4 - Implementation of a Container Class

5 - Containers and Reducers Review

6 - Actions and Action Creators

7 - Binding Action Creators

8 - Creating an Action
	
9 - Consuming Actions in Reducers

10 - Consuming Actions in Reducers Continued

11 - Conditional Rendering
	
12 - Reducers and Actions Review


                    Section 5 - Middleware
1 - App Overview and Planning
	
2 - Component Setup
	
3 - Controlled Components and Binding Context
	
4 - Form Elements in React
	
5 - Working with API's
	
6 - Introduction to Middleware
	
7 - Ajax Requests with Axios
	
8 - Redux-Promise in Practice
	
9 - Redux-Promise Continued
	
10 - Avoiding State Mutations in Reducers
	
11 - Building a List Container
	
12 - Mapping Props to a Render Helper
	
13 - Adding Sparkline Charts
	
14 - Making a Reusable Chart Component
	
15 - Labeling of Units
	
16 - Google Maps Integration
	
17 - Google Maps Integration Continued
	
18 - Project Review


                    Section 6 - Redux Router & Redux Form
1 - App Overview and Goals
	
2 - Exploring the Posts Api
	
3 - Installing React Router
	
4 - React Router - What is It?
	
5 - Setting Up React Router
	
6 - Route Configuration
	
7 - Nesting Of Routes
	
8 - IndexRoutes with React Router
	
9 - Back To Redux - Index Action
	
10 - Catching Data with Posts Reducer
	
11 - Catching Data with Posts Reducer Continued
	
12 - Fetching Data with Lifecycle Methods
	
13 - Fetching Data with Lifecycle Methods Continued
	
14 - Creating New Posts
	
15 - Navigation with the Link Component
	
16 - Forms and Form Submission
	
17 - More on Forms and Form Submission
	
18 - Passing Control to Redux Form
	
19 - CreatePost Action Creator
	
20 - Form Validation
	
21 - Form Validation Continued
	
22 - Navigating on Submit
	
23 - Posts Index
	
24 - Dynamic Route Params
	
25 - Loading Data on Render
	
26 - Handling Null Props
	
27 - Delete Action Creator
	
28 - Navigate on Delete
	
29 - ReactRouter and ReduxForm Wrapup


