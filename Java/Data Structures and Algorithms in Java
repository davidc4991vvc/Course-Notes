                    Udemy Course - https://www.udemy.com/from-0-to-1-data-structures/learn/#/
                    Loony Corn - From 0 to 1: Data Structures & Algorithms in Java (Highly Recommended)

                
                    Section 1 - What this course is about
1 - You, This Course and Us - 
    A quick Bio of the course authors, what the course is about and how the teaching method will differ
    from other courses which will cover the same material.


                    Section 2 - Data Structures And Algorithms - A Symbiotic Relationship
1 - Why are Data Structure and Algoritms important 
    Data structures are ways to organise information so that it can have useful things done to it.
    Structures allow for efficient operations.
    These structures try to make operations perform faster, make difficult operations possible and make
    information complexity and interrelationships much more intuitively understandable.
    Structures and algorithms are interlinked as structures make algorithms more efficient and often form
    the core of these algoritms.
    Different Structures are better in different situations
    Sets - Maybe better for things like Library Membership queries
    Hash Tables - Compilers are one example as they can use tables to look up operations
    Graphs - Can be used to illustrate relatiionships such as on Social Media sites.
    Stacks - Are used a lot in browsers to provide undo & back button functionality.
    Index Structures - They can be things like inverted index and suffix tree which are both used by search engines.
    
    

                    Section 3 - Complexity Analysis and the Big-O Notation
1.Performance and Complexity

2.The Big-O Notation

3.Big-O Notation More examples



                    Section 4 - Linked Lists
1 - The Linked List - The Most Basic Of All Data Structures 

2 - Linked List Problems 

3 - Linked Lists vs Arrays



                    Section 5 - Stacks And Queues
1 - Meet The Stack - Simple But Powerful

2 - Building A Stack Using Java

3 - Match Parenthesis To Check A Well Formed Expression 

4 - Find The Minimum Element In A Stack In Constant Time

5 - Meet The Queue - A Familiar Sight In Everyday Life

6 - The Circular Queue - Tricky But Fast

7 - Build A Queue With 2 Stacks



                    Section 6 - Sorting and Searching
1 - Sorting Trade Offs

2 - Selection Sort 

3 - Bubble Sort

4 - Insertion Sort

5 - Shell Sort

6 - Merge Sort

7 - Quick Sort

8 - Binary Search - search quickly through a sorted list



                    Section 7 - Binary Trees
1 - Meet The Binary Tree - A Hierarchical Data Structure 

2 - Breadth First Traversal

3 - Depth First - Pre-OrderTraversal

4 - Depth First - In-Order and Post-Order Traversal 


                    Section 8 - Binary Search Trees
1 - The Binary Search Tree - an introduction

2 - Insertion and Lookup in a Binary Search Tree



                    Section 9 - Binary Tree Problems
1 - Minimum Value, Maximum Depth And Mirror

2 - Count Trees, Print Range and Is BST



                    Section 10 - Heaps
1 - The Heap Is Just The Best Way to Implement a Priority Queue

2 - Meet The Binary Heap - It's A Tree At Heart

3 - The Binary Heap - Logically A Tree Really An Array 

4 - The Binary Heap - Making It Real With Code 

5 - Heapify

6 - Insert And Remove From A Heap 



                    Section 11: Revisiting Sorting - The Heap Sort
1 - Heap Sort Phase I - Heapify 

2 - Heap Sort Phase II - The Actual Sort 



                    Section 12: Heap Problems
1 - Maximum Element In A Minimum Heap and K Largest Elements In A Stream 




                    Section 13: Graphs
1 - Introducing The Graph 

2 - Types Of Graphs 

3 - The Directed And Undirected Graph 

4 - Representing A Graph In Code 

5 - Graph Using An Adjacency Matrix 

6 - Graph Using An Adjacency List And Adjacency Set 

7 - Comparison Of Graph Representations 

8 - Graph Traversal - Depth First And Breadth First 



                    Section 14: Graph Algorithms
1 - Topological Sort In A Graph 

2 - Implementation Of Topological Sort 



                    Section 15: Shortest Path Algorithms
1 - Introduction To Shortest Path In An Unweighted Graph - The Distance Table 

2 - The Shortest Path Algorithm Visualized 

3 - Implementation Of The Shortest Path In An Unweighted Graph 

4 - Introduction To The Weighted Graph 

5 - Shortest Path In A Weighted Graph - A Greedy Algorithm 

6 - Dijkstra's Algorithm Visualized 

7 - Implementation Of Dijkstra's Algorithm 

8 - Introduction To The Bellman Ford Algorithm 

9 - The Bellman Ford Algorithm Visualized 

10 - Dealing With Negative Cycles In The Bellman Ford Algorithm 

11 - Implementation Of The Bellman Ford Algorithm



                    Section 16: Spanning Tree Algorithms
1 - Prim's Algorithm For a Minimal Spanning Tree 

2 - Use Cases And Implementation Of Prim's Algorithm 

3 - Kruskal's Algorithm For a Minimal Spanning Tree 

4 - Implementation Of Kruskal's Algorithm



                    Section 17: Graph Problems
1 - Design A Course Schedule Considering Pre-reqs For Courses 

2 - Find The Shortest Path In A Weighted Graphs - Fewer Edges Better 
