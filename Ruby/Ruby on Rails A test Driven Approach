                    Notes from the Udemy Course
                    Ruby on Rails A Test Driven Approach
                    By Mashrur Hossain & Emmanuel Asante
                    This is a Project Driven Course to highlight TDD
                    Project Built With previous course version available at
                    https://github.com/marb61a/bookstore_app
                    
                    


                    Section 1: Introduction
1 - Course Introduction
Basic introduction to the course from the instructor

2 - The Finished Application
The student is shown a fully functioning version of the completed project

3  - Multiple parts of the course: Split structure 
An explanation from the instructors for the (new) structure of the course which covers
both Rails\Ruby and TDD Conventions

4 - Overview and kickoff of local dev vs cloud9 
Developing in Rails on local machines can be challenging in some environments as Ruby & Rails

5 - Local installation of ruby 
A quick guide on how to install Ruby on your local machine

6 - Installation of Rails in local env 

7 - Version control with Git 

8 - Sign up for cloud9 IDE 
    Cloud9 is an online based IDE which means that you can do your coding from inside a browser.
    This removes the necessity for local installations although it may still be a good idea to do
    some local development as the experiences may differ.
    Cloud9 has a free tier available and is located at - https://c9.io where you can sign up.

9 - Familiarity with cloud IDE 

10 - Cloud9 directory familiarity 

11 - Installation of Rails in cloud IDE 



                    Section 2: Introduction to testing
1 - MVC structure of Rails Apps 
All Rails apps use Model-View-Controller conventions in construction. An excellent tutorial on explaining
MVC is available here - http://www.bogotobogo.com/RubyOnRails/RubyOnRails_Model_View_Controller_MVC.php. Also
because Rails has very definite ideas on where various files should go it is referred to as a highly opinionated
framework.

2 - Introduction to different kinds of automated testing 

3 - Start a new rails app 
In order to generate a new rails app you need to use the following command
rails new "project name" - this will generate a lot of files all in the folder of the project name

4 - Advanced automated testing setup 

5 - Guardfile code (Article)

6 - RVM usage and other unix processes 

7 - First test for articles index 

8 - Build articles listing page and turn test suite green 



                    Section 3: Setup with code repositories and production deploy
1 - Introduction to section 3 
A basic introduction to what is coming in the section

2 - Sign up for bitbucket 
How to signup for an account at Bitbucket an online code version controller, this is used instead
of Github. Bitbucket allows for free users to have private repositories (repositories are basically projects)
whic stops their source code being seen.

3 - Create git repo and push code to bitbucket 

4 - Signup for Heroku and deploy to production 
Heroku is a platform that is used to host apps, as it has a free tier it is used by a lot of developers for 
sample projects. There is a 13 step guide on the CodeAcademy site which guides users on how to deploy a web app.
The steps are as follows
    Instructions

    Create a new Heroku account.
    Install the Heroku Toolbelt on your computer. The Heroku Toolbelt is installed by default in new Codecademy workspaces.
    In the terminal, log in using the email address and password you used when creating your Heroku account:

    $ heroku login
    In Gemfile, add the pg gem to your Rails project. Change:
    gem sqlite
    to
    gem 'sqlite3', group: :development
    gem 'pg', '0.18.1', group: :production

    In Gemfile, add the rails_12factor gem::
    gem 'rails_12factor', group: :production
    
    In the terminal, install the gems specified in the Gemfile:
    $ bundle install
    
    Ensure config/database.yml is using the postgresql adapter. Change:
    production:
      <<: *default
      database: db/production.sqlite3
    to
    production:
      <<: *default
      adapter: postgresql
      database: db/production.sqlite3
      
    Commit your changes to git:
    $ git add .
    $ git commit -m "Heroku config"
    
    In the terminal, create an app on Heroku:
    $ heroku create
    
    Push your code to Heroku:
    $ git push heroku master
    
    If you are using the database in your application, migrate the database by running:
    $ heroku run rake db:migrate
    
    If you need to seed your database with data, run:
    $ heroku run rake db:seed
    
    Get the URL of your app and visit it in the browser:
    $ heroku apps:info
    In the output, copy the address in the Web URL field. Open a new tab in your browser, and visit your app.
    


                    Section 4: Learn unit testing to build models using TDD
1 - Introduction to section 4 
A basic introduction to what is coming in the section

2 - Unit test example model part 1: spec and test creation 

3 - Unit test example model part 2: recipe validations and completion 

4 - Unit test example for users part 1: spec and tests 

5 - Unit test example for users part 2: email regex and validations 

6 - Section 4 conclusion 



                    Section 5: Implement TDD for model and wrap up unit testing
1 - Create article model and articles table with spec and tests 

2 - More tests and validations for article model 

3 - Homework assignment: Create users tests and model 

4 - Section 5 conclusion and handoff to part 2 of course 
Conclusion of the section and the handoff to the project part of the course



                    Section 6: Setup of Development Environment and Writing Model Specs
1 - Installing Ruby and Rails

2 - Setting up a Github Account
As discussed above, the first section uses Bitbuck but Github is much the same, it maybe well
to know both.

3 - Complete Application Files

4 - Creating a New Rails Project
As above the starting of a new rails project is very simple - rails new "project name" is the
command needed to generate a new rails project and associated files.

5 - Test-Driven Development
A quick explanation of what Test Driven Development (TDD) is and how it is used. TDD is basically
using tests to help write your application, for instance if there is an input box needed to be filled in
you can write a test to ensure that this scenario occurs and that tests fail until it does it properly.

6 - Installing and Setting Up RSpec and Capybara

7 - Author Model Specs --- Adding Fabrication Gem

8 - Author Model Specs -- Implementation and Validation



                    Section 7: Writing Authors Controller Specs
1 - Specs for the 'index' and 'show' actions

2 - Specs for the 'new' action

3 - Styling Author New Form

4 - Specs for the 'create' action --- Successful Path

5 - Specs for the 'create' action --- Unsuccessful Path

6 - Specs for the 'edit' and 'update' actions---Successful path

7 - Specs for the 'edit' and 'update' actions---Unsuccessful path

8 - Specs for the 'delete' action



                    Section 8: Creating Publisher
1 - Creating Publisher Model and Introducing Shoulda Matchers




                    Section 9: Relationship between entitities
1 - Dealing with One-to-Many Relationship Between Publisher and Book

2 - Dealing with Many-to-Many Relationship Between Author and Book




                    Section 10: Writing Feature Tests
1 - "Creating Author" Feature Test---Successful Path

2 - "Creating Author" Feature Test---Failure Path



                    Section 11: Creating the Book Model and Controller
1 - Creating the Book Model

2 - Exercise: Implementing the Book Controller given controller specs

3 - Exercise files (Article)

4 - Exercise solution (Article)
    Source Code is provided as a solutuion for the previous exercise challenge for the student



                    Section 12: Revisiting the Many-to-Many Relationship: Has-Many Through
1 - Adding has_many :through Relationships to Book and Author Models

2 - Creating the Book Feature Test---Writing the Test

3 - Creating the Book Feature Test---Writing the View Template

4 - Using jQuery UI Datepicker to Simplify Date Entry



                    Section 13: File uploading
1 - Adding File Field to Form

2 - Setting Up Dropbox for File Upload

3 - Setting Up Carrierwave

Lecture 66	
Seeding Data In Rails
14:36



                  Section 14: User Signup
1 - Introducing The Mechanics of Signing Up

2 - Creating the User Model---Writing the Model Specs

3 - Creating the User Model---Validating the Attributes

4 - Exercise: Implementing the Users Controller

5 - Writing the "Creating User" Feature Test

6 - Introducing Regular Expression (Regex)
    Ruby like every other language uses Regular Expressions, this is a basic intro to RegEx and
    its concepts.
    There are more indepth tutorials on RegEx at the following web addresses
    http://rubylearning.com/satishtalim/ruby_regular_expressions.html
    http://code.tutsplus.com/tutorials/ruby-for-newbies-regular-expressions--net-19812
    http://www.tutorialspoint.com/ruby/ruby_regular_expressions.htm
    There is also a RegEx editor and tester available at
    http://rubular.com
    
7 - Validating the Format of the Email Field

8 - Exercise: Implementing the "Showing User" Profile

9 - User Show View Template

10 - Solution to Showing User Profile Implementation



                    Section 15: Authentication from scratch
1 - Signing in---Creating the Sessions Controller Specs

2 - Signing in---Implementing the 'new' and 'create' Actions

3 - Signing in---Signing in Feature Test and Implementation

4 - Signing in---Refactoring the 'create' Action Code

5 - Signing Out



                    Section 16: Basic Access Control
1 - Adding an Admin Field

2 - Restricting Access To Guest Users

3 - Restricting Access To Non-Admin Users and Introduction to Shared Examples

4 - Fixing The Broken Feature Specs

5 - Testing the Access Restrictions in the Browser

6 - Friendly Forwarding



                    Section 17: Creating an Admin Namespace
1 - Implementing the Admin Namespace and Moving the Author Resources

2 - Fixing Broken Author and Book Specs

3 - Fixing Rest of Broken Specs

4 - Hiding Admin-Only Links From Unauthorized Users



                    Section 18: Creating a Book Catalogue
1 - Creating the Catalog Controller and Views

2 - Searching for Books --- Writing the Book Search Feature Test

3 - Searching for Books --- Implementing the 'search' Action



                    Section 19: Adding Shopping Cart
1 - Creating a Cart

2 - Creating Cart Items---Creating the Model and Controller

3 - Creating Cart Items---Implementing the 'create' action and Cart 'show' Page

4 - Implementing the Cart Show View Template

5 - Calculating Cart Total Amount

6 - Deleting a Cart

7 - Creating a Cart Using Ajax



                    Section 20: Checking Out
1 - Introduction to the Checkout Process

2 - Pagination

3 - Using Nested Attributes in the Model

4 - Using Nested Attributes in the View



                    Section 21: Order Processing
1 - Creating the Order Model

2 - Creating a Stripe Account
Stripe is a company which allows electronic payments over the internet. 
The company website is located at - https://stripe.com/ie
Stripe provides sets of API's for developers to use in their applications
Although Stripe is commercial software it does provide a free tier for test apps.

3 - Creating Orders Controller 'new' Action

4 - Sending Email From the Application

5 - Installing the Stripe Gem in the Application

6 - Creating Orders Controller 'create' Action

7 - Adding Checkout Button

8 - Creating Orders' Feature Test With Javascript

9 - Hiding the 'Checkout' and 'Clear Cart' Buttons

10 - Viewing Emails in the Browser



                    Section 22: Securing the application further
1 - Using Random Token



                    Section 23: Resetting User Password
1 - How Password Resets Work

2 - The Mechanics of Resetting Password

3 - Invalidating Old Token After Successful Password Reset

4 - Password Reset Feature Test

5 - Running And Verifying All Specs



                    Section 24: Deployment
1 - Deploying The Application To Heroku

                
